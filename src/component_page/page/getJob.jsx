import React, { useEffect, useState } from "react";
import axios from "axios";

const JobList = () => {
  const [jobs, setJobs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedJob, setSelectedJob] = useState(null);
  const [answer, setAnswer] = useState("");
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [winner, setWinner] = useState(null);

  useEffect(() => {
    const storedWinner = sessionStorage.getItem("connectedPlayer");
    if (!storedWinner) {
      setWinner(null);
      setLoading(false);
      return;
    }

    setWinner(JSON.parse(storedWinner));

    const fetchJobs = async () => {
      try {
        const response = await axios.get("https://public-nodejs.onrender.com/v1/api/getjob");
        if (response.data.success) {
          console.log("Fetched jobs:", response.data.data); // Debug job data
          setJobs(response.data.data);
        } else {
          throw new Error("D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá");
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchJobs();
  }, []);

  const handleApply = (job) => {
    setSelectedJob(job);
    setAnswer("");
    setErrorMessage("");
  };

  const handleSubmitAnswer = async () => {
    setErrorMessage("");
    if (!selectedJob || !answer) {
      setErrorMessage("Vui l√≤ng ch·ªçn c√¥ng vi·ªác v√† nh·∫≠p c√¢u tr·∫£ l·ªùi!");
      return;
    }

    const connectedPlayer = JSON.parse(sessionStorage.getItem("connectedPlayer"));
    if (!connectedPlayer || !connectedPlayer.maNguoiChoi) {
      setErrorMessage("Kh√¥ng t√¨m th·∫•y m√£ ng∆∞·ªùi ch∆°i. Vui l√≤ng k·∫øt n·ªëi l·∫°i!");
      return;
    }
    const { maNguoiChoi, diaChiVi } = connectedPlayer;

    if (!selectedJob.rewardAmount) {
      setErrorMessage("C√¥ng vi·ªác n√†y kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£!");
      return;
    }

    try {
      // Normalize user answer
      const userAnswer = answer.trim();

      // Check if correctAnswer exists
      if (!selectedJob.correctAnswer) {
        setErrorMessage("C√¢u tr·∫£ l·ªùi ƒë√∫ng kh√¥ng t·ªìn t·∫°i trong d·ªØ li·ªáu c√¥ng vi·ªác!");
        return;
      }

      let correctAnswer;
      try {
        // Handle correctAnswer based on its type
        if (typeof selectedJob.correctAnswer === "string") {
          correctAnswer = selectedJob.correctAnswer.trim();
        } else {
          correctAnswer = JSON.stringify(selectedJob.correctAnswer).trim();
        }
      } catch (err) {
        console.error("L·ªói khi x·ª≠ l√Ω correctAnswer:", err);
        setErrorMessage("L·ªói ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi ƒë√∫ng t·ª´ c∆° s·ªü d·ªØ li·ªáu!");
        return;
      }

      // Log for debugging
      console.log("User Answer:", userAnswer);
      console.log("Correct Answer:", correctAnswer);

      // Compare answers
      const isCorrect = userAnswer === correctAnswer;

      if (!isCorrect) {
        setErrorMessage("C√¢u tr·∫£ l·ªùi ch∆∞a ch√≠nh x√°c. Vui l√≤ng th·ª≠ l·∫°i!");
        return;
      }

      // Create winner record
      await axios.post("https://public-nodejs.onrender.com/v1/api/createwinner", {
        jobTitle: selectedJob.title,
        userAnswer: answer,
        maNguoiChoi: maNguoiChoi,
        diaChiVi: diaChiVi,
      });

      // Update player token balance
      await axios.post("https://public-nodejs.onrender.com/v1/api/updateplayer", {
        maNguoiChoi: maNguoiChoi,
        tokenBalance: selectedJob.rewardAmount,
      });
      //Update job status
      await axios.post("https://public-nodejs.onrender.com/v1/api/updatejobs", {
        title: selectedJob.title,
      });
      // Update local job state
      setJobs((prevJobs) =>
        prevJobs.map((job) =>
          job.title === selectedJob.title ? { ...job, isCompleted: true } : job
        )
      );

      setSuccessMessage(
        `·ª®ng tuy·ªÉn th√†nh c√¥ng v√† nh·∫≠n ƒë∆∞·ª£c ${selectedJob.rewardAmount} token! C√¥ng vi·ªác ƒë√£ ho√†n th√†nh.`
      );
      setSelectedJob(null);
      setAnswer("");
    } catch (err) {
      console.error("L·ªói trong handleSubmitAnswer:", err);
      setErrorMessage(`L·ªói: ${err.response?.data?.message || err.message}`);
    }
  };

  if (loading) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;
  if (!winner) return <p style={{ color: "gray", fontStyle: "italic" }}>B·∫°n kh√¥ng chi·∫øn th·∫Øng</p>;
  if (error) return <p style={{ color: "red" }}>L·ªói: {error}</p>;

  return (
    <div>
      {successMessage && <div>üéâ {successMessage} üéâ</div>}
      <h2>Danh s√°ch c√¥ng vi·ªác</h2>
      <table border="1">
        <thead>
          <tr>
            <th>Ti√™u ƒë·ªÅ</th>
            <th>M√¥ t·∫£</th>
            <th>Ph·∫ßn th∆∞·ªüng</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {jobs.map((job) => (
            <tr key={job._id}>
              <td>{job.title}</td>
              <td>{job.description}</td>
              <td>{job.rewardAmount} token</td>
              <td>
                {job.isCompleted ? (
                  <span style={{ color: "gray" }}>ƒê√£ ho√†n th√†nh</span>
                ) : (
                  <button onClick={() => handleApply(job)}>·ª®ng tuy·ªÉn</button>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
      {selectedJob && (
        <div>
          <h3>·ª®ng tuy·ªÉn: {selectedJob.title}</h3>
          <textarea
            value={answer}
            onChange={(e) => setAnswer(e.target.value)}
            placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n (JSON pipeline ho·∫∑c chu·ªói)"
          />
          {errorMessage && <p style={{ color: "red" }}>{errorMessage}</p>}
          <button onClick={handleSubmitAnswer}>G·ª≠i</button>
          <button onClick={() => setSelectedJob(null)}>H·ªßy</button>
        </div>
      )}
    </div>
  );
};

export default JobList;